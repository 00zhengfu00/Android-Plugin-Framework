apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }

    defaultConfig {
        applicationId "com.example.plugintest"
        minSdkVersion 8
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.1"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    buildTypes {
        release {
            versionNameSuffix "0x8f"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
            versionNameSuffix "0x8f"
        }
    }

}

//
//configurations {
//    provided
//}
//
//sourceSets {
//    main {
//        compileClasspath += configurations.provided
//        runtimeClasspath += configurations.provided
//    }
//}
//
//sourceSets.all {
//    compileClasspath += configurations.provided
//}

dependencies {
    //compile 'com.android.support:appcompat-v7:23.0.0'
    compile fileTree(dir: 'libs', include: ['*.jar'])

    provided files(project(':PluginCore').getProjectDir().getAbsolutePath() + '/build/intermediates/bundles/release/classes.jar')
    provided files(project(':PluginShareLib').getProjectDir().getAbsolutePath() + '/build/intermediates/bundles/release/classes.jar')
    //provided files('../PluginCore/build/intermediates/bundles/release/classes.jar')
    //provided project(':PluginShareLib')
    //compile project(':PluginShareLib')
}
